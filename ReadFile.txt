"use strict";
var ContactForm;
(function (ContactForm) {
    let CONST = {
        IsManualStageChange: false,
        IsCustomSave: false,
        CreateOpportunityStageName: "Prospecting",
        MembershipProspectingTypeValue: "100000001",
        MembershipSuspectTypeValue: "100000005",
        OpportunityTypeProspectingValue: "867590000",
        Control: {
            MembershipType: "customertypecode",
            BPF_Control: [] = [
                { stage: "Prospecting", controlId: "mwa_isprospectingtaskscompleted", templateName: "Contact Prospecting Checklist" },
                { stage: "Needs Analysis", controlId: null, templateName: "Opportunity Type Prospecting Checklist" },
                { stage: "Product Selection", controlId: null, templateName: "Opportunity Type Prospecting Checklist" },
                { stage: "Application", controlId: null, templateName: "Opportunity Type Prospecting Checklist" },
                { stage: "Pending Business", controlId: null, templateName: "Opportunity Type Prospecting Checklist" }
            ]
        }
    };
    ContactForm.onFormLoad = (executionContext) => {
        const formContext = executionContext.getFormContext();
        const isVisible = setBPFVisibility(executionContext);
        onStageClickedEvent(executionContext);
        formContext.data.entity.addOnSave(onFormSave);
        if (isVisible) {
            formContext.data.process.addOnStageSelected(onStageClickedEvent);
            formContext.data.process.addOnPreStageChange(bpfStageChangeEvent);
        }
    };
    const onFormSave = (executionContext) => {
        const formContext = executionContext.getFormContext();
        //@ts-ignore 
        const eventArgs = executionContext.getEventArgs();
        // Check if the specific field value was modified
        const isFieldDirty = formContext.getAttribute(CONST.Control.MembershipType).getIsDirty();
        if (isFieldDirty && !CONST.IsCustomSave) {
            // Refresh the form after the save operation completes
            eventArgs.preventDefault(); // Ensure we manually handle save and refresh
            CONST.IsCustomSave = true;
            setTimeout(() => {
                //@ts-ignore  Then, explicitly save the form
                formContext.data.save(1).then(function success() {
                    // Reset the flag after save completes
                    CONST.IsCustomSave = false;
                    window.location.reload();
                }, function (error) {
                    CONST.IsCustomSave = false;
                    // Handle save error
                    console.log("Save failed with error: " + error.message);
                });
            }, 1000);
        }
    };
    const setBPFVisibility = (executionContext) => {
        const formContext = executionContext.getFormContext();
        const membershipType = formContext.getAttribute(CONST.Control.MembershipType).getValue();
        if (membershipType != CONST.MembershipProspectingTypeValue && membershipType != CONST.MembershipSuspectTypeValue) {
            formContext.ui.process.setVisible(false);
            return false;
        }
        return true;
    };
    const onStageClickedEvent = (executionContext) => {
        const formContext = executionContext.getFormContext();
        var interval = null;
        interval = setInterval(function () {
            var element = parent.document.getElementById("MscrmControls.Containers.ProcessStageControl-setActiveButtonContainer");
            if (element && element.parentElement) {
                element.parentElement.style.display = "none";
                clearInterval(interval);
            }
        }, 10);
        setTimeout(function () {
            if (interval) {
                clearInterval(interval);
            }
        }, 2000);
    };
    const bpfStageChangeEvent = (executionContext) => {
        var _a;
        const formContext = executionContext.getFormContext();
        //@ts-ignore  Get the process execution context
        const eventArgs = executionContext.getEventArgs();
        const membershipType = formContext.getAttribute(CONST.Control.MembershipType).getValue();
        if (eventArgs.getDirection() === "Next" && (membershipType == CONST.MembershipProspectingTypeValue || membershipType == CONST.MembershipSuspectTypeValue) && !CONST.IsManualStageChange) {
            // Get the target stage
            const targetStage = eventArgs.getStage();
            const processInstance = formContext.data.process;
            const activeStage = processInstance.getActiveStage();
            //@ts-ignore 
            const nextStage = executionContext._eventArgs._stage._stageStep.stageId;
            const stageName = activeStage.getName();
            const pendingTasks = retriveCurrentStagePendingTasks(executionContext, stageName);
            const controlToUpdate = (_a = CONST.Control.BPF_Control.find(item => item.stage == stageName.trim())) === null || _a === void 0 ? void 0 : _a.controlId;
            if (pendingTasks.length > 0) {
                eventArgs.preventDefault();
                if (controlToUpdate) {
                    formContext.getAttribute(controlToUpdate).setValue(false);
                }
                const alertMessage = `The below tasks for the '${stageName}' stage are still pending. Please complete them before proceeding to the next stage.\n\n${pendingTasks}`;
                var alertSettings = { confirmButtonLabel: "OK", text: alertMessage, title: "Warning" };
                var alertOptions = { height: 260, width: 260 };
                Xrm.Navigation.openAlertDialog(alertSettings);
                CONST.IsManualStageChange = false;
            }
            else {
                if (controlToUpdate) {
                    formContext.getAttribute(controlToUpdate).setValue(true);
                }
                const opportunityId = createOpportunity(executionContext);
                const processInstanceId = associateOpportunityWithContactBPF(executionContext, opportunityId, nextStage);
                formContext.data.save().then(function () {
                    Xrm.Utility.openEntityForm("opportunity", opportunityId);
                });
            }
        }
        return;
    };
    const retriveCurrentStagePendingTasks = (executionContext, stageName) => {
        var _a;
        const formContext = executionContext.getFormContext();
        const contactId = formContext.data.entity.getId();
        let pendingTasks = "";
        const templateName = (_a = CONST.Control.BPF_Control.find((item) => item.stage == stageName.trim())) === null || _a === void 0 ? void 0 : _a.templateName;
        const query = `/api/data/v9.2/tasks?$select=activityid,hsl_name&$filter=(statecode ne 1 and _regardingobjectid_value eq ${contactId} and hsl_TaskListInstanceCategoryId_Task/hsl_name eq '${stageName}' and hsl_TaskListTemplateId_Task/hsl_name eq '${templateName}')`;
        var req = new XMLHttpRequest();
        req.open("GET", Xrm.Utility.getGlobalContext().getClientUrl() + query, false);
        req.setRequestHeader("OData-MaxVersion", "4.0");
        req.setRequestHeader("OData-Version", "4.0");
        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        req.setRequestHeader("Accept", "application/json");
        req.setRequestHeader("Prefer", "odata.include-annotations=*");
        req.onreadystatechange = function () {
            if (this.readyState === 4) {
                req.onreadystatechange = null;
                if (this.status === 200) {
                    var results = JSON.parse(this.response);
                    console.log(results);
                    for (var i = 0; i < results.value.length; i++) {
                        var result = results.value[i];
                        // Columns
                        var taskName = result["hsl_name"];
                        pendingTasks += `\u2022 ${taskName}\n`;
                    }
                }
                else {
                    console.log(this.responseText);
                }
            }
        };
        req.send();
        return pendingTasks;
    };
    const createOpportunity = (executionContext) => {
        const formContext = executionContext.getFormContext();
        const contactId = formContext.data.entity.getId().replace(/[{}]/g, '');
        const firstName = formContext.getAttribute("firstname").getValue();
        const middlename = formContext.getAttribute("middlename").getValue();
        const lastname = formContext.getAttribute("lastname").getValue();
        const contactName = `${(firstName + ' ' + (middlename || "")).trim()} ${lastname}`;
        const newOpportunityName = contactName + " - Prospecting";
        let opportunityId = getExistingOpportunity(newOpportunityName, contactId);
        if (!opportunityId) {
            const opportunityData = {
                "name": newOpportunityName,
                "parentcontactid@odata.bind": `/contacts(${contactId})`,
                "mwa_opportunitytypecode": CONST.OpportunityTypeProspectingValue,
            };
            var req = new XMLHttpRequest();
            req.open("POST", Xrm.Utility.getGlobalContext().getClientUrl() + "/api/data/v9.2/opportunities", false);
            req.setRequestHeader("OData-MaxVersion", "4.0");
            req.setRequestHeader("OData-Version", "4.0");
            req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            req.setRequestHeader("Accept", "application/json");
            req.setRequestHeader("Prefer", "odata.include-annotations=*");
            req.onreadystatechange = function () {
                if (this.readyState === 4) {
                    req.onreadystatechange = null;
                    if (this.status === 204) {
                        var uri = req.getResponseHeader("OData-EntityId");
                        var regExp = /\(([^)]+)\)/;
                        var matches = regExp.exec(uri);
                        //@ts-ignore 
                        var newId = matches[1];
                        opportunityId = newId;
                    }
                    else {
                        console.log(this.responseText);
                    }
                }
            };
            req.send(JSON.stringify(opportunityData));
        }
        return opportunityId;
    };
    const associateOpportunityWithContactBPF = (executionContext, opportunityId, nextStageId) => {
        const formContext = executionContext.getFormContext();
        var processInstanceId = formContext.data.process.getInstanceId().replace("{", "").replace("}", "");
        var currentStage = formContext.data.process.getActiveStage();
        var currentStageId = currentStage.getId().replace("{", "").replace("}", "");
        var bpfInstance = {
            "bpf_opportunityid@odata.bind": "/opportunities(" + opportunityId + ")",
            "activestageid@odata.bind": "/processstages(" + nextStageId + ")"
        };
        var req = new XMLHttpRequest();
        req.open("PATCH", Xrm.Utility.getGlobalContext().getClientUrl() + "/api/data/v9.0/mwa_contactbpfleadtoprospectqualificationpros(" + processInstanceId + ")", false);
        req.setRequestHeader("OData-MaxVersion", "4.0");
        req.setRequestHeader("OData-Version", "4.0");
        req.setRequestHeader("Accept", "application/json");
        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        req.onreadystatechange = function () {
            if (this.readyState === 4) {
                req.onreadystatechange = null;
                if (this.status === 204 || this.status === 1223) {
                    console.log("Opportunity associated with BPF");
                }
                else {
                    console.log(this.responseText);
                }
            }
        };
        req.send(JSON.stringify(bpfInstance));
        return processInstanceId;
    };
    const getExistingOpportunity = (opportunityName, contactId) => {
        let existingOpportunityId = "";
        let req = new XMLHttpRequest();
        req.open("GET", Xrm.Utility.getGlobalContext().getClientUrl() + `/api/data/v9.2/opportunities?$select=opportunityid,name&$filter=(mwa_opportunitytypecode eq ${CONST.OpportunityTypeProspectingValue} and name eq '${opportunityName}' and _parentcontactid_value eq ${contactId})`, false);
        req.setRequestHeader("OData-MaxVersion", "4.0");
        req.setRequestHeader("OData-Version", "4.0");
        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        req.setRequestHeader("Accept", "application/json");
        req.setRequestHeader("Prefer", "odata.include-annotations=*");
        req.onreadystatechange = function () {
            if (this.readyState === 4) {
                req.onreadystatechange = null;
                if (this.status === 200) {
                    var results = JSON.parse(this.response);
                    console.log(results);
                    for (var i = 0; i < results.value.length; i++) {
                        var result = results.value[i];
                        // Columns
                        var opportunityid = result["opportunityid"];
                        existingOpportunityId = opportunityid;
                    }
                }
                else {
                    console.log(this.responseText);
                }
            }
        };
        req.send();
        return existingOpportunityId;
    };
    const getNextStage = (executionContext) => {
        const formContext = executionContext.getFormContext();
        var activeStage = formContext.data.process.getActiveStage();
        var activeStageId = activeStage.getId();
        let nextStage = null;
        formContext.data.process.getActiveProcess().getStages().forEach(function (stage) {
            if (stage.getId() === activeStageId) {
                //@ts-ignore 
                var nextStage = stage.getNextStage();
                if (nextStage) {
                    var nextStageId = nextStage.getId();
                    nextStage = nextStageId;
                }
                else {
                    console.log("No next stage found");
                }
            }
        });
        return "";
    };
})(ContactForm || (ContactForm = {}));
;
